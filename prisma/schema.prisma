generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model permission {
  id                 String               @id(map: "permission_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String?
  description        String?
  profile_permission profile_permission[]
}

model profile {
  id                 String               @id(map: "profiles_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String?
  profile_permission profile_permission[]
  user               user[]
}

model profile_permission {
  permission_d String     @db.Uuid
  profile_id   String     @db.Uuid
  permission   permission @relation(fields: [permission_d], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profile_permission_permission_fk")
  profile      profile    @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profile_permission_profile_fk")

  @@id([permission_d, profile_id], map: "profile_permission_pk")
}

model user {
  id            String         @id(map: "users_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String
  first_name    String?
  last_name     String?
  profile_id    String?        @db.Uuid
  profile_image String?        @db.VarChar(255)
  created_at    DateTime?      @db.Timestamp(6)
  last_login    DateTime?      @db.Timestamp(6)
  sbu_id        String         @db.Uuid
  audit_log     audit_log[]
  data_version  data_version[]
  exercise      exercise[]
  ref_sbu       ref_sbu        @relation(fields: [sbu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_ref_sbu_fk")
  profile       profile?       @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_profiles_fk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model exercise {
  id               String            @id(map: "exercise_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String?
  created_at       DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?         @db.Timestamptz(6)
  target           Json?
  year             Int?
  status           String?
  creator_id       String            @db.Uuid
  description      String?
  exercise_type_id String            @db.Uuid
  parent_period_id String            @db.Uuid
  data_version     data_version[]
  user             user              @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercise_creator_id")
  exercise_type    exercise_type     @relation(fields: [exercise_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercise_exercise_type_fk")
  period           period            @relation(fields: [parent_period_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercise_parent_period_fk")
  exercise_period  exercise_period[]
  exercise_step    exercise_step[]
  period_config    period_config[]
}

model exercise_period {
  exercise_id String   @db.Uuid
  period_id   String   @db.Uuid
  year        Int?
  exercise    exercise @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercise_period_exercise_fk")
  period      period   @relation(fields: [period_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercise_period_period_fk")

  @@id([exercise_id, period_id], map: "exercise_period_pk")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model exercise_step {
  id             String       @id(map: "exercise_step_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  step_config_id String?      @db.Uuid
  status         String?
  deadline_dt    DateTime?    @db.Timestamptz(6)
  exercise_id    String       @db.Uuid
  exercise       exercise     @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercise_step_exercise_fk")
  step_config    step_config? @relation(fields: [step_config_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "exercise_step_step_config_fk")
}

model period {
  id                                                   String            @id(map: "period_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                 String?
  parent_id                                            String?           @db.Uuid
  sorted_by                                            Int?
  start_month                                          Int?
  start_day                                            Int?
  exercise                                             exercise[]
  exercise_period                                      exercise_period[]
  period                                               period?           @relation("periodToperiod", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "period_period_fk")
  other_period                                         period[]          @relation("periodToperiod")
  period_config_period_config_parent_period_idToperiod period_config[]   @relation("period_config_parent_period_idToperiod")
  period_config_period_config_period_idToperiod        period_config[]   @relation("period_config_period_idToperiod")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model step_config {
  id            String          @id(map: "step_config_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  code          String?
  icon_key      String?
  sorted_by     Int?
  deadline_day  Int?
  mandatory     Boolean?
  exercise_step exercise_step[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model data_source {
  id           String         @id(map: "data_source_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String?
  name         String?
  code         String?
  sbu_id       String         @db.Uuid
  site_id      String         @db.Uuid
  ref_sbu      ref_sbu        @relation(fields: [sbu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "data_source_sbu_fk")
  ref_site     ref_site       @relation(fields: [site_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "data_source_site_fk")
  data_version data_version[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model data_version {
  id             String       @id(map: "data_version_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  version        Int?
  path           String?
  name           String?
  exercise_id    String?      @db.Uuid
  created_at     DateTime?    @db.Timestamptz(6)
  data_source_id String?      @db.Uuid
  user_id        String       @db.Uuid
  data_source    data_source? @relation(fields: [data_source_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "data_version_data_source_fk")
  exercise       exercise?    @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "data_version_exercise_fk")
  user           user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "data_version_user_fk")
}

model ref_sbu {
  id          String        @id(map: "ref_sbu_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?
  data_source data_source[]
  ref_site    ref_site[]
  user        user[]
}

model ref_site {
  id          String        @id(map: "ref_site_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?
  code        String?
  sbu_id      String?       @db.Uuid
  data_source data_source[]
  ref_sbu     ref_sbu?      @relation(fields: [sbu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ref_site_ref_sbu_fk")
}

model audit_log {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String     @db.Uuid
  action_id  String     @db.Uuid
  timestamp  DateTime   @default(now()) @db.Timestamp(6)
  details    String?
  ref_action ref_action @relation(fields: [action_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audit_log_action_fk")
  user       user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "audit_log_user_fk")
}

model exercise_type {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String?    @db.VarChar(255)
  month_offset Int?
  exercise     exercise[]
}

model period_config {
  exercise_id                                   String   @db.Uuid
  parent_period_id                              String   @db.Uuid
  period_id                                     String   @db.Uuid
  sorted_by                                     Int?
  bump_year                                     Boolean?
  exercise                                      exercise @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "period_config_exercise_fk")
  period_period_config_parent_period_idToperiod period   @relation("period_config_parent_period_idToperiod", fields: [parent_period_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "period_config_parent_period_fk")
  period_period_config_period_idToperiod        period   @relation("period_config_period_idToperiod", fields: [period_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "period_config_period_fk")

  @@id([exercise_id, parent_period_id, period_id])
}

model ref_action {
  id          String      @id(map: "action_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?
  key         String?     @db.VarChar(255)
  label       String?     @db.VarChar(255)
  audit_log   audit_log[]
}
